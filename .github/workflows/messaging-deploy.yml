name: Messaging System CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/components/messaging/**'
      - 'src/services/**'
      - 'src/hooks/**'
      - 'src/types/messaging.ts'
  pull_request:
    branches: [main]
    paths:
      - 'src/components/messaging/**'
      - 'src/services/**'
      - 'src/hooks/**'

env:
  NODE_VERSION: '18'
  VITE_API_URL: ${{ secrets.VITE_API_URL }}
  VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
  VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY }}

jobs:
  test:
    name: Test Messaging System
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint -- src/components/messaging src/services src/hooks

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm test -- --coverage src/tests/messaging.test.tsx

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: messaging

      - name: Run integration tests
        run: npm run test:integration
        env:
          TEST_ENV: ci

  build:
    name: Build Messaging System
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          npx size-limit

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'flux-studio-messaging'
          path: '.'
          format: 'HTML'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to Vercel Staging
        run: |
          npx vercel --prod \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --env VITE_API_URL=${{ secrets.STAGING_API_URL }} \
            --env VITE_WS_URL=${{ secrets.STAGING_WS_URL }}

      - name: Run smoke tests
        run: |
          npm run test:e2e -- --env staging

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Messaging system deployed to staging'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to Vercel Production
        run: |
          npx vercel --prod \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --env VITE_API_URL=${{ secrets.PROD_API_URL }} \
            --env VITE_WS_URL=${{ secrets.PROD_WS_URL }}

      - name: Run production smoke tests
        run: |
          npm run test:e2e -- --env production

      - name: Create deployment record
        run: |
          curl -X POST ${{ secrets.DEPLOYMENT_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "environment": "production",
              "version": "${{ github.sha }}",
              "component": "messaging-system",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }'

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Messaging system deployed to production! üöÄ'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v3

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets.STAGING_URL }}/messages
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Performance benchmark
        run: |
          npm run test:performance

      - name: Check performance budgets
        run: |
          node scripts/check-performance.js

  rollback:
    name: Rollback if needed
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()

    steps:
      - name: Rollback deployment
        run: |
          npx vercel rollback \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --yes

      - name: Notify team of rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: '‚ö†Ô∏è Production deployment rolled back due to failures'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}