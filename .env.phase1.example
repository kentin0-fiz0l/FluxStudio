# Phase 1: OAuth Integration & MCP Environment Variables
# Copy this file to .env and fill in your credentials

# ========================================
# Existing Flux Studio Configuration
# ========================================
NODE_ENV=production
AUTH_PORT=3001
JWT_SECRET=your-jwt-secret-here
GOOGLE_CLIENT_ID=your-google-client-id
CORS_ORIGINS=https://fluxstudio.art,http://localhost:3000

# Database Configuration (Sprint 3)
USE_DATABASE=true
DUAL_WRITE_ENABLED=true
DATABASE_URL=postgresql://fluxstudio_user:fluxstudio2025secure@localhost:5432/fluxstudio
DB_HOST=localhost
DB_PORT=5432
DB_NAME=fluxstudio
DB_USER=fluxstudio_user
DB_PASSWORD=fluxstudio2025secure

# ========================================
# Phase 1: Figma OAuth Integration
# ========================================

# Figma OAuth Credentials
# Get these from: https://www.figma.com/developers/apps
FIGMA_CLIENT_ID=your-figma-client-id
FIGMA_CLIENT_SECRET=your-figma-client-secret
FIGMA_REDIRECT_URI=https://fluxstudio.art/api/integrations/figma/callback

# Figma Webhook Secret (optional, for webhook signature verification)
# Set this when configuring webhooks in Figma
FIGMA_WEBHOOK_SECRET=your-figma-webhook-secret

# Figma Personal Access Token (optional, for non-OAuth API access)
# Only needed if using Figma MCP server without OAuth
FIGMA_ACCESS_TOKEN=

# ========================================
# Phase 1: Slack OAuth Integration
# ========================================

# Slack OAuth Credentials
# Get these from: https://api.slack.com/apps
SLACK_CLIENT_ID=your-slack-client-id
SLACK_CLIENT_SECRET=your-slack-client-secret
SLACK_REDIRECT_URI=https://fluxstudio.art/api/integrations/slack/callback

# Slack Signing Secret (for webhook signature verification)
# Found in: App Settings > Basic Information > App Credentials
SLACK_SIGNING_SECRET=your-slack-signing-secret

# Slack Bot Token (optional, for bot-level operations)
# Found in: OAuth & Permissions > Bot User OAuth Token
SLACK_BOT_TOKEN=

# ========================================
# Phase 1: GitHub OAuth Integration (Future)
# ========================================

# GitHub OAuth Credentials
# Get these from: https://github.com/settings/developers
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret
GITHUB_REDIRECT_URI=https://fluxstudio.art/api/integrations/github/callback

# ========================================
# Phase 1: MCP (Model Context Protocol) Configuration
# ========================================

# Enable/Disable MCP Features
MCP_AUTO_CONNECT=true              # Auto-connect to MCP servers on startup
MCP_ENABLE_CACHING=true            # Enable query result caching
MCP_POSTGRES_ENABLED=true          # Enable PostgreSQL MCP server
MCP_FIGMA_ENABLED=false            # Enable Figma MCP server (use direct API instead)
MCP_FILESYSTEM_ENABLED=false       # Enable filesystem MCP server
MCP_GIT_ENABLED=false              # Enable Git MCP server

# ========================================
# Security & Rate Limiting
# ========================================

# Redis Cache (Optional - already configured in Sprint 3)
REDIS_URL=redis://localhost:6379

# Sentry (Optional - already configured in Sprint 13)
SENTRY_DSN=your-sentry-dsn
SENTRY_ENVIRONMENT=production

# ========================================
# Development Mode Settings
# ========================================

# For local development, use these settings:
# NODE_ENV=development
# AUTH_PORT=3001
# FIGMA_REDIRECT_URI=http://localhost:3001/api/integrations/figma/callback
# SLACK_REDIRECT_URI=http://localhost:3001/api/integrations/slack/callback
# GITHUB_REDIRECT_URI=http://localhost:3001/api/integrations/github/callback
# MCP_AUTO_CONNECT=false  # Disable auto-connect in development to avoid errors

# ========================================
# Production Deployment Checklist
# ========================================

# Before deploying Phase 1 to production:
# ✅ 1. Run database migration: psql -U fluxstudio_user -d fluxstudio -f database/migrations/007_oauth_tokens.sql
# ✅ 2. Set all OAuth client IDs and secrets
# ✅ 3. Configure webhook secrets (Figma, Slack)
# ✅ 4. Test OAuth flows in staging environment first
# ✅ 5. Verify MCP PostgreSQL connection works
# ✅ 6. Set MCP_AUTO_CONNECT=true only after verifying DATABASE_URL is correct
# ✅ 7. Update CORS_ORIGINS to include production domain
# ✅ 8. Deploy updated server-auth.js
# ✅ 9. Restart PM2: pm2 restart flux-auth
# ✅ 10. Test OAuth flows end-to-end

# ========================================
# Optional: Advanced MCP Settings
# ========================================

# MCP Query Logging (set to false in production for performance)
# Automatically controlled by NODE_ENV in mcp-config.js

# MCP Cache TTL (seconds) - default is 300 (5 minutes)
# Configured in mcp-config.js

# MCP Rate Limiting (requests per minute) - default is 30
# Configured in mcp-config.js
